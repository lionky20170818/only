package com.xforceplus.athena.activemq.salesbill;

import com.baidu.unbiz.fluentvalidator.FluentValidator;
import com.baidu.unbiz.fluentvalidator.Result;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.xforceplus.athena.activemq.Queues;
import com.xforceplus.athena.activemq.salesbill.localcache.LocalCacheManager;
import com.xforceplus.athena.activemq.salesbill.processor.HandleInvalidOrDeleteProcessor;
import com.xforceplus.athena.activemq.salesbill.processor.SalesBillImportMainProcessor;
import com.xforceplus.athena.common.CommonCooperationTools;
import com.xforceplus.athena.constant.SalesBillConstants;
import com.xforceplus.athena.constant.enums.*;
import com.xforceplus.athena.domain.jooq.Tables;
import com.xforceplus.athena.domain.jooq.tables.pojos.TSalesBillInterfaceObj;
import com.xforceplus.athena.domain.jooq.tables.pojos.TSalesBillObj;
import com.xforceplus.athena.domain.jooq.tables.pojos.TSalesBillPoolObj;
import com.xforceplus.athena.exception.SalesbillHandleException;
import com.xforceplus.athena.extension.extension.ExtensionExecutor;
import com.xforceplus.athena.extensionpoint.upload.SalesBillAmountCalcExtensionExtPt;
import com.xforceplus.athena.salesBill.SalesBillPoolServiceImpl;
import com.xforceplus.athena.salesBill.SalesBillService;
import com.xforceplus.athena.salesBill.common.SalesBillHistoryTools;
import com.xforceplus.athena.salesBill.common.SalesBillPoolTools;
import com.xforceplus.athena.salesBill.common.SalesBillTools;
import com.xforceplus.athena.salesBill.domain.SalesBillInterfaceAthena;
import com.xforceplus.athena.salesBill.domain.SalesBillMessageHead;
import com.xforceplus.athena.salesBill.importfile.SalesBillImportFileHandler;
import com.xforceplus.athena.salesBill.validator.SalesMessageHeaderValidator;
import com.xforceplus.athena.utils.*;
import com.xforceplus.xplat.core.api.ContextHolder;
import com.xforceplus.xplat.core.api.ContextService;
import com.xforceplus.xplat.core.service.TransactionalServiceBase;
import com.xforceplus.xplat.core.utils.DateUtils;
import com.xforceplus.zeus.inner.dto.TaxCatalogItem;
import com.xforceplus.zeus.inner.dto.TenantSimpleObj;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.jooq.Condition;
import org.jooq.impl.DSL;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.messaging.handler.annotation.Headers;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.*;

import static com.baidu.unbiz.fluentvalidator.ResultCollectors.toSimple;
import static com.xforceplus.athena.domain.jooq.Tables.T_SALES_BILL;
import static com.xforceplus.xplat.configuration.jms.JmsConfiguration.INNER_QUEUE;


@Service
public class SalesBillUploadDealListener extends TransactionalServiceBase {
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private CommonCooperationTools commonCooperationTools = null;
    @Autowired
    private SalesBillTools salesbillTools = null;
    @Autowired
    private InvoiceUtils invoiceUtils = null;
    @Autowired
    private SalesBillImportMainProcessor salesBillImportMainProcessor = null;
    @Autowired
    private HandleInvalidOrDeleteProcessor handleInvalidOrDeleteProcessor = null;
    @Autowired
    private ExtensionExecutor extensionExecutor;
    @Autowired
    private ContextService contextService;
    @Autowired
    private ContextHolder contextHolder;
    @Autowired
    private SalesBillImportFileHandler salesBillImportFileHandler;

    @Autowired
    private SalesBillPoolTools salesBillPollTools = null;
    @Autowired
    private SalesBillService salesBillService;
    @Autowired
    private LocalCacheManager localCacheManager;
    @Autowired
    private SalesBillHistoryTools historyTools;
    @Autowired
    SalesBillPoolServiceImpl salesBillPoolService = null;

    private BlockingQueue<HeaderMessage> queue = new LinkedBlockingQueue(10);
    private ExecutorService service = Executors.newFixedThreadPool(20);
    //
    @JmsListener(destination = Queues.SALES_BILL_UPLOAD_DEAL, concurrency = Queues.CONCURRENCY_1_20, containerFactory = INNER_QUEUE)
    public void salesBillUploadDealRunable(@Headers Map<String, String> header, String message) throws InterruptedException {
        //header={tenantCode=zf, systemOrig =2333333, salesBillUploadBatchNo=cq, versionNo=1.0, username=DA100302, status=1}
        logger.info("业务单MQ集成header: {}, message: {}",header, message);
        salesBillUploadDeal(header, message);

//        queue.put(new HeaderMessage(header, message));
    }
//    @PostConstruct
//    public void init() {
//        logger.info("executor service startup");
//        for (int i = 0; i < 20; i++) {
//            service.execute(() -> {
//                while (true) {
//                    try {
//                        HeaderMessage bean = queue.take();
//                        salesBillUploadDeal(bean.getHeader(), bean.getMessage());
//                    } catch (Exception e) {
//                        logger.error(e.getMessage(), e);
//                    }
//                }
//            });
//        }
//    }
//
//    @PreDestroy
//    public void destroy() {
//        logger.info("executor service shutdown");
//        service.shutdown();
//    }

//    @JmsListener(destination = Queues.SALES_BILL_UPLOAD_DEAL, concurrency = Queues.CONCURRENCY_1_5, containerFactory = INNER_QUEUE)
    public void salesBillUploadDeal(@Headers Map<String, String> header, String message) {
        //header={tenantCode=zf, systemOrig =2333333, salesBillUploadBatchNo=cq, versionNo=1.0, username=DA100302, status=1}
        logger.info("业务单MQ集成thread: {}, header: {}, message: {}",Thread.currentThread().getName(), header, message);
        putContext(header.get("tenantCode"));
        SalesBillMessageHead messageHeader = getMessageHeader(header);
        String result = MessageResultStatus.FAIL.value();
        List<Map<String,Object>> responseMsgList = new ArrayList<>();
        List<String> salesBillNoLst = Lists.newArrayList();
        try {
            Result checkResult = FluentValidator.checkAll().on(messageHeader, new SalesMessageHeaderValidator()).doValidate().result(toSimple());//验证messageHeader
            if (checkResult.isSuccess()) {
                result = handleUploadSalesBillInterfaceMessage(messageHeader,responseMsgList, message, salesBillNoLst);
            } else {
                fullMessageHeaderCheckException(responseMsgList, checkResult.getErrors().toString());
            }
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            result = MessageResultStatus.FAIL.value();
            fulfillExceptionMessage(responseMsgList, e,salesBillNoLst);
        } finally {
            try {
                sendUploadSalesBillProcessResult(result, messageHeader, responseMsgList);
            } catch (Exception e){
                logger.info("保存处理结果失败！",e);
            }
            clearContext();
        }
    }

    private void putContext(String tenantCode) {
        if(!CommonTools.isEmpty(String.valueOf(tenantCode))) {
            contextService.setAttribute(SalesBillConstants.TENANT_CODE,tenantCode);
        }
        contextService.setAttribute(SalesBillConstants.BIZ_CODE,BizCodeType.SALES_BILL_UPLOAD);
    }

    private void clearContext() {
        contextHolder.clearContext();
    }

    /**
     * 解析消息头
     * @param header 消息提原始消息通
     * @return 返回封装后的消息头
     */
    private SalesBillMessageHead getMessageHeader(Map<String, String> header){
        //header={tenantCode=zf, systemOrig =2333333, salesBillUploadBatchNo=cq, versionNo=1.0, username=DA100302, status=1}
        SalesBillMessageHead messageHeader = new SalesBillMessageHead();
        messageHeader.setTenantCode(header.get("tenantCode"));
        messageHeader.setSystemOrig(header.get("systemOrig"));
        messageHeader.setSalesBillUploadBatchNo(header.get("salesBillUploadBatchNo"));
        messageHeader.setVersionNo(header.get("versionNo"));
        messageHeader.setUsername(header.get("username"));
        messageHeader.setStatus(CommonTools.getDefault(header.get("status"), MessageHeadStatus.UPLOAD.value()));
        return messageHeader;
    }

    /**
     * 处理业务单上传的消息
     * @param header 消息头
     * @param responseMsgLst 错误集合
     * @param message  mq上传消息
     * @return 返回处理结果
     */
    private String handleUploadSalesBillInterfaceMessage(SalesBillMessageHead header, List<Map<String,Object>> responseMsgLst, String message, List<String> salesBillNoLst){
        List<Map> salesBillMapLst = JsonUtils.writeJsonToListObject(message, Map.class);
        List<TSalesBillObj> salesBillObjLst = Lists.newLinkedList();
        Set<String> salesBillTenantCodeBatchAndNos = new HashSet<>();
        int processSuccessCounter = 0;
        String salesBillNo = "";
        List<TSalesBillInterfaceObj> interfaceObjList = Lists.newArrayList();

        for (int i = 0; i < salesBillMapLst.size(); i++) {
            TSalesBillInterfaceObj bean = null;
            try{
                Map salesBillObjMap = salesBillMapLst.get(i);
                StringBuilder errors =  new StringBuilder();
                bean = getSalesBillInterfaceObj(header,  salesBillObjMap, salesBillTenantCodeBatchAndNos, errors);
                salesBillNo = bean.getSalesBillNo();
//                CommonTools.zeroBigDecimalFields(salesBillInterfaceObj, TSalesBillInterfaceObj.class);
                salesBillNoLst.add(salesBillNo);
                String messageHeaderStatus = header.getStatus();
                // 作废删除执行结束后，无法保存interface表，所以将填充interface的方法提到前面
                fulfillSalesBillInterfaceObjInfo(header, bean);
                if (MessageHeadStatus.INVALID.value().equals(messageHeaderStatus) || MessageHeadStatus.DELETED.value().equals(messageHeaderStatus)) {
                    bean = salesBillImportMainProcessor.process(bean);
                    bean.setStatus(messageHeaderStatus);
                    List<TSalesBillInterfaceObj> objs = handleInvalidOrDeleteProcessor.process(bean);
                    for(TSalesBillInterfaceObj obj : objs) {
                        if (ProcessResultType.FAIL.value().equals(obj.getProcessFlag())) {
                            fillRecordResponse(responseMsgLst, bean.getSalesBillBatch(), salesBillNo, obj.getProcessRemark());
                        } else if (MessageHeadStatus.INVALID.value().equals(messageHeaderStatus)) {
                            fillRecordResponse(responseMsgLst, bean.getSalesBillBatch(), salesBillNo, "作废成功");
                        } else if (MessageHeadStatus.DELETED.value().equals(messageHeaderStatus)) {
                            fillRecordResponse(responseMsgLst, bean.getSalesBillBatch(), salesBillNo, "删除成功");
                        }
                    }
                    continue;
                }
                //bugfix-10407
                handleSalesBillInterfaceObj(header, bean.getSalesBillNo(),bean, errors,i+1);
                processSuccessCounter = addSalesBillInterface2SalesBill(salesBillNo, header,  responseMsgLst , salesBillObjLst, bean, processSuccessCounter);
                fillRecordResponse(responseMsgLst,bean.getSalesBillBatch(), salesBillNo,errors.length() > 0 ? "新增失败" : "验证成功");
                interfaceObjList.add(bean);

            } catch (Exception e) {
                logger.error("",e);
                String errorMsg = "业务单号["+salesBillNo+"]"+(e.getMessage()==null?"":e.getMessage());
                fillRecordResponse(responseMsgLst,bean.getSalesBillBatch(), salesBillNo,errorMsg);
                insertInterfaceRecord(bean,ProcessResultType.FAIL.value(),errorMsg);
            }
        }
        // bugfix-10102
        if (processSuccessCounter == salesBillMapLst.size() && ! salesBillImportFileHandler.checkInsertSalesBillIsDuplicate(salesBillObjLst)) {
            // 目前业务不支持上传业务单处理部分成功，所以只有部分成功任务失败，业务单上传方自行处理。
            int affected = salesbillTools.insertSalesBillBatch(salesBillObjLst);
            if (affected != salesBillObjLst.size()) {
                throw new SalesbillHandleException("所有业务单批量入库失败：" + salesBillObjLst.size() + ":" + affected);
            }
            //业务单导入数据集成标识，自动加入结算池;isAutoJoinPool=1&&poolUserName!=null
            String resultStr = isAutoJoinPool(interfaceObjList, salesBillObjLst);
            if (!"1".equals(resultStr)) {
                throw new SalesbillHandleException("业务单批量自动加入结算池失败");
            }
            for(Map<String,Object> response : responseMsgLst){
                if("验证成功".equals(response.get("handleMsg"))) {
                    response.put("handleMsg", "新增成功");
                }
            }
            return MessageResultStatus.SUCCESS.value();
        }else {
            return MessageResultStatus.FAIL.value();
        }
    }

    /**
     * 自动加入结算池
     * @return resultStr
     */
    public String isAutoJoinPool(List<TSalesBillInterfaceObj> interfaceObjList, List<TSalesBillObj> salesBillObjLst){
        String resultStr = "0";//0-失败;1-成功
        try {
            //查找需要自动加入的业务单
            List<String> salesBillLst = Lists.newArrayList();
            salesBillObjLst.stream().forEach(item -> {
                if(SalesBillCatalog.WAITINGFORHANDLE.value().equals(item.getUploadConfirmFlag())
                        && SalesBillCatalog.WAITINGFORHANDLE.value().equals(item.getReceiveConfirmFlag()) ){
                    salesBillLst.add(item.getSalesBillId());
                }
            });
            List<TSalesBillInterfaceObj> interfaceResultList = Lists.newArrayList();
            interfaceObjList.stream().forEach(item ->{
                        if (BusinessBillType.AR.value().equals(item.getBusinessBillType())
                                && "1".equals(item.getIsAutoJoinPool())
                                && !CommonTools.isEmpty(item.getPoolAccountName())
                                && salesBillLst.contains(item.getSalesBillId())
                                ){
                            interfaceResultList.add(item);
                        }
                    }
            );

            //按照用户分组
            Map<String, List<String>> user2InterfaceMap = new ConcurrentHashMap<>();
            for (TSalesBillInterfaceObj reqObj : interfaceResultList){
                String userIdAndTenantCode = reqObj.getPoolAccountName()+"#"+reqObj.getSellerTenantCode();
                List<String> interfaceList = user2InterfaceMap.get(userIdAndTenantCode);
                if(interfaceList == null){
                    interfaceList = Lists.newArrayList();
                }
                interfaceList.add(reqObj.getSalesBillId());
                user2InterfaceMap.put(userIdAndTenantCode, interfaceList);
            }

            //加入结算池操作
            for (Map.Entry<String, List<String>> entry : user2InterfaceMap.entrySet()) {
                String userIdAndTenantCode = entry.getKey();
                String userId = userIdAndTenantCode.substring(0, userIdAndTenantCode.indexOf("#"));
                String tenantCode = userIdAndTenantCode.substring(userIdAndTenantCode.indexOf("#")+1, userIdAndTenantCode.length());
                List<String> dataList = entry.getValue();
                //加入结算池
                userJoinPool(tenantCode, userId, dataList);
            }

            resultStr = "1";
        } catch (Exception e) {
            logger.info("isAutoJoinPool err:{}",e.getMessage());
        }

        return resultStr;
    }

    public String userJoinPool(String tenantCode ,String userId, List<String> dataList){
        String resultStr = "0";//0-失败;1-成功
        try {
            //getPoolID
            String poolId = "";
            List conditions= Lists.newArrayList();
            conditions.add(Tables.T_SALES_BILL_POOL.USER_ID.eq(userId));
            List<TSalesBillPoolObj> poolObjs = dao.queryObj(Tables.T_SALES_BILL_POOL,conditions);
            if (!CommonTools.isEmpty(poolObjs)){
                poolId = poolObjs.get(0).getPoolId();
            } else {
                TenantSimpleObj tenantByCode = localCacheManager.getTenantByCode(Optional.ofNullable(tenantCode).orElse(""));
                Long tenantId = tenantByCode.getTenantId();
                poolId = salesBillPollTools.createSalesBillPool(userId,tenantCode,tenantId,"","","");
            }
            if (!CommonTools.isEmpty(poolId)){
                List salesBillConditions = Lists.newArrayList();
                salesBillConditions.add(Tables.T_SALES_BILL.SALES_BILL_ID.in(dataList));
                List<TSalesBillObj> salesBillLst = dao.queryObj(Tables.T_SALES_BILL,salesBillConditions);

                logger.info("userJoinPool加入结算池开始,poolId:{};salesBillLst:{};", poolId, salesBillLst);
                List<TSalesBillObj> newTSalesBillObjs = Lists.newArrayList();
                if(!CommonTools.isEmpty(salesBillLst)) {
                    for (int i = 0; i < salesBillLst.size(); i++) {
                        TSalesBillObj salesBill = salesBillLst.get(i);
                        salesBill.setPoolId(poolId);
                        TSalesBillObj newSalesBillObj = new TSalesBillObj();
                        CommonTools.copyProperties(salesBill,newSalesBillObj);
                        newSalesBillObj.setSalesBillId(salesBill.getSalesBillId());
                        newSalesBillObj.setUserId(userId);
                        newSalesBillObj.setStatus(SalesBillStatus.NORMAL.value());
                        newSalesBillObj.setUploadConfirmFlag(SalesBillCatalog.ALREADY_JOIN_POLL.value());
                        newSalesBillObj.setReceiveConfirmFlag(SalesBillCatalog.ALREADY_JOIN_POLL.value());
                        newSalesBillObj.setComputeStatus(SalesBillComputeStatus.PENDING_COMPUTE.value());
                        newSalesBillObj.setSettlementItemId(CommonTools.emptyString());
                        newSalesBillObj.setSettlementNo(CommonTools.emptyString());
                        newSalesBillObj.setSettlementId(CommonTools.emptyString());
                        newSalesBillObj.setAddPoolType(SalesBillAddPoolType.ADD_2_POOL.value());
                        newTSalesBillObjs.add(newSalesBillObj);
                        historyTools.recordHistoryAfterCommit(SalesBillAction.JOIN_POLL, salesBill, newSalesBillObj,"");
                    }

                    logger.info("userJoinPool newTSalesBillObjs info {}",newTSalesBillObjs);
                    //更新业务单
                    updateBatch(Tables.T_SALES_BILL,newTSalesBillObjs);
                    //更新业务单记录状态后，将结算池状态更新为待计算状态
                    salesBillPoolService.updatePoolStatusForCompute(poolId);
                }
            }

            resultStr = "1";
        } catch (Exception e) {
            logger.info("isAutoJoinPool err:{}",e.getMessage());
        }

        return resultStr;
    }

    /**
     * 获取salesBillInterface信息
     * @param header 消息头
     * @param salesBillObjMap 业务单对象
     * @param salesBillTenantCodeBatchAndNos  上传业务单号集合
     * @param errors 检查失败告警信息
     * @return 业务单接口对象
     */
    private TSalesBillInterfaceObj getSalesBillInterfaceObj(SalesBillMessageHead header, Map salesBillObjMap, Set<String> salesBillTenantCodeBatchAndNos, StringBuilder errors){
        Map salesBillMainMap = (Map) salesBillObjMap.get("salesBillMain");
        if (salesBillMainMap == null) {
            errors.append("消息格式非法,不存在salesBillMain节点|");
        }
        SalesBillInterfaceAthena salesBillInterfaceItem = new SalesBillInterfaceAthena();
        CommonTools.copyProperties2(salesBillMainMap, salesBillInterfaceItem);

        String tenantCode = contextService.getAttribute(SalesBillConstants.TENANT_CODE) + "";
        String salesBillBatchAndNo = tenantCode + "," + salesBillInterfaceItem.getSalesBillBatch() + "," + salesBillInterfaceItem.getSalesBillNo();
        if (salesBillTenantCodeBatchAndNos.contains(salesBillBatchAndNo)) {
            // 业务单批次对应结算单号，业务单号对应结算单明细
            String warningMsg = "消息内(业务单批次号+业务单编号)重复: " + salesBillInterfaceItem.getSalesBillBatch() + "+" + salesBillInterfaceItem.getSalesBillNo() + "|";
            errors.append(warningMsg);
        }else{
            salesBillTenantCodeBatchAndNos.add(salesBillBatchAndNo);
        }
        logger.info("JsonUtils.writeObjectToFastJson(saleItem) = " + salesBillInterfaceItem);
        //保存接口表记录
        TSalesBillInterfaceObj salesBillInterfaceObj = new TSalesBillInterfaceObj();
        CommonTools.copyProperties(salesBillInterfaceItem, salesBillInterfaceObj);
        //默认识别方式2
        if (Tools.isEmpty(salesBillInterfaceItem.getSellerInfoFill())) {
            salesBillInterfaceObj.setSellerInfoFill(SellerInfoFillType.FILL_BY_NO_TAX.value());
        }
        if (Tools.isEmpty(salesBillInterfaceItem.getPurchaserInfoFill())) {
            salesBillInterfaceObj.setPurchaserInfoFill(PurchaserInfoFillType.FILL_BY_NO_TAX.value());
        }
        if (BusinessBillType.AP.value().equals(salesBillInterfaceObj.getBusinessBillType())) {
            salesBillInterfaceObj.setPurchaserTenantCode(header.getTenantCode());
            salesBillInterfaceObj.setSellerTenantCode(CommonTools.emptyString());
        } else if (BusinessBillType.AR.value().equals(salesBillInterfaceObj.getBusinessBillType())) {
            salesBillInterfaceObj.setPurchaserTenantCode(CommonTools.emptyString());
            salesBillInterfaceObj.setSellerTenantCode(header.getTenantCode());
        }
        salesBillInterfaceObj.setImportBatchNo(header.getSalesBillUploadBatchNo());
//        salesBillInterfaceObj.setSalesBillBatch(header.getSalesBillUploadBatchNo());
        salesBillInterfaceObj.setSourceMessage(JsonUtils.writeObjectToFastJson(salesBillMainMap));
        salesBillInterfaceObj.setImportType(ImportType.UPLOAD.value());
        // 填充业务单接口中价格数据
        if(!checkSalesBillNoUnique(salesBillInterfaceObj)){
            String warningMsg = "系统内(业务单批次号+业务单编号)重复: " + salesBillInterfaceItem.getSalesBillBatch() + "+" + salesBillInterfaceItem.getSalesBillNo() + "|";
            errors.append(warningMsg);
        }
        //fulfillmentPrice(salesBillInterfaceObj);
        //重新计算业务单可结算金额，可开金额
        extensionExecutor.execute(SalesBillAmountCalcExtensionExtPt.class, extension->extension.calcSettleOrMakeAmount(salesBillInterfaceObj));
        return salesBillInterfaceObj;
    }

    /**
     * 结算单号是否已经存在：集团内，销方唯一，购方唯一，销购可以相同
     * @param tSalesBillInterfaceObj 业务单接口对象
     * @return 业务单单号是否唯一
     */
    public boolean checkSalesBillNoUnique(TSalesBillInterfaceObj tSalesBillInterfaceObj){
        Condition condition = T_SALES_BILL.SALES_BILL_NO.eq(tSalesBillInterfaceObj.getSalesBillNo());
        condition=condition.and(T_SALES_BILL.SALES_BILL_BATCH.eq(tSalesBillInterfaceObj.getSalesBillBatch()));
//        condition=condition.and(T_SALES_BILL.STATUS.notIn(SalesBillStatus.getDeadStatusValue()));
        //陈齐光
        condition=condition.and(T_SALES_BILL.STATUS.ne(SalesBillStatus.DELETED.value()));
        condition = fulfillTenantCodeCondition(tSalesBillInterfaceObj, condition);
        Integer count = create.select(DSL.count())
                .from(T_SALES_BILL)
                .where(condition)
                .fetchOne().value1();
        // 业务单号已经存在
        return count == null || count < 1;
    }


    /**
     *  根据业务单业务类型，向查询条件 condition填充不同的查询条件。
     *  业务单号的生成规则以来业务单类型，AR<->SELLER_TENANT_CODE,
     *                                    AP<->PURCHASER_TENANT_CODE
     * @param tSalesBillInterfaceObj 业务单接口对象
     * @param condition 查询条件
     * @return 查询条件
     */
    private Condition fulfillTenantCodeCondition(TSalesBillInterfaceObj tSalesBillInterfaceObj, Condition condition){
        BusinessBillType businessBillType = null;
        try{
            businessBillType =  BusinessBillType.valueOf(tSalesBillInterfaceObj.getBusinessBillType());
        }catch(Exception e){
            logger.error("",e);
        }
        if(businessBillType == null){
            return condition;
        }
        String userTenantCode;
        switch (businessBillType){
            case AR:
                // 销售方业务单
                userTenantCode = tSalesBillInterfaceObj.getSellerTenantCode();
                condition = condition.and(T_SALES_BILL.SELLER_TENANT_CODE.eq(userTenantCode));
                break;
            case AP:
                // 购方业务单
                userTenantCode = tSalesBillInterfaceObj.getPurchaserTenantCode();
                condition = condition.and(T_SALES_BILL.PURCHASER_TENANT_CODE.eq(userTenantCode));
                break;
        }
        return condition;
    }

    /**
     * 处理单条业务单数据
     * @param messageHeader 消息头
     * @param salesBillInterfaceObj 业务单接口对象
     * @param warningMessageBuilder  检查失败告警信息
     * @param index  业务单行数
     */
    private void handleSalesBillInterfaceObj(SalesBillMessageHead messageHeader, String salesBillNo, TSalesBillInterfaceObj salesBillInterfaceObj, StringBuilder warningMessageBuilder, int index) {
        String log = salesBillImportFileHandler.salesBillInterfaceValidate(salesBillInterfaceObj, index);
        if(!CommonTools.isEmpty(log)) {
            warningMessageBuilder.append(log);
        }
        //
//        String tenantCode =  messageHeader.getTenantCode();
//        salesBillInterfaceObj = salesBillImportMainProcessor.process(salesBillInterfaceObj, tenantCode);
        if(warningMessageBuilder.length() > 0) {
            salesBillInterfaceObj.setProcessFlag(ProcessResultType.FAIL.value());
            salesBillInterfaceObj.setProcessRemark(CommonTools.getContentByLength(warningMessageBuilder.toString(), 65535));
        }else {
            salesBillInterfaceObj.setProcessFlag(ProcessResultType.SUCCESS.value());
            salesBillInterfaceObj.setProcessRemark("处理成功");
        }
        salesBillInterfaceObj.setProcessTime(Tools.getTime17());
        callNewTx(salesbillTools::insetSalesbillObj, salesBillInterfaceObj);
    }
    /**
     * 填充业务单接口基本信息
     * @param messageHeader 消息头
     * @param salesBillInterfaceObj 业务单接口对象
     */
    private void fulfillSalesBillInterfaceObjInfo(SalesBillMessageHead messageHeader, TSalesBillInterfaceObj salesBillInterfaceObj){
        String userName = messageHeader.getUsername();
        String systemOrig =  messageHeader.getSystemOrig();
        String status = messageHeader.getStatus();
        String salesBillId = CommonTools.getUUID();
        salesBillInterfaceObj.setSeqId(salesBillId);
        salesBillInterfaceObj.setSalesBillId(salesBillId);
        salesBillInterfaceObj.setCreateUserId(userName);
        salesBillInterfaceObj.setCreateTime(DateTools.getTime17());
        salesBillInterfaceObj.setSystemOrigin(CommonTools.isEmpty(systemOrig) ? SystemOrigs.ERP.value() : systemOrig);
        salesBillInterfaceObj.setProcessFlag(ProcessResultType.PENDDING_PROCESS.value());
        salesBillInterfaceObj.setProcessRemark("");
        salesBillInterfaceObj.setProcessTime(DateTools.getTime17());
        salesBillInterfaceObj.setProcessUserId(Tools.isEmpty(userName) ? "" : userName);
        salesBillInterfaceObj.setImportBatchNo(CommonTools.getImportBatchNo(""));
        salesBillInterfaceObj.setStatus(status);
    }

    /**
     * 判断业务单接口是否处理成功并加入业务单新增集合里面
     * @param messageHeader  消息头
     * @param responseErrorMsgLst    错误集合
     * @param salesBillObjLst 业务单集合
     * @param salesBillInterfaceObj  业务单接口对象
     * @param salesBillInterfaceProcessSuccessCounter 上传业务单处理成功计数器
     * @return 上传业务单数据成功个数
     */
    private int addSalesBillInterface2SalesBill(String salesBillNo, SalesBillMessageHead messageHeader, List<Map<String,Object>> responseErrorMsgLst , List<TSalesBillObj> salesBillObjLst,
                                                TSalesBillInterfaceObj  salesBillInterfaceObj, int salesBillInterfaceProcessSuccessCounter){
        logger.info("进入到SalesBillUploadDealListener.addSalesBillInterface2SalesBill 方法块，ProcessFlag的值为: {}, 当前时间: {}", salesBillInterfaceObj.getProcessFlag(), DateUtils.curDateStr());
        if (ProcessResultType.FAIL.value().equals(salesBillInterfaceObj.getProcessFlag())) {
            Map<String,Object> errItem = Maps.newHashMap();
            errItem.put("salesBillNo", salesBillNo);
            errItem.put("handleMsg", salesBillInterfaceObj.getProcessRemark());
            responseErrorMsgLst.add(errItem);
        } else {
            salesBillInterfaceProcessSuccessCounter++;
            if (MessageHeadStatus.UPLOAD.value().equals(messageHeader.getStatus())) {
                TSalesBillObj salesBill = new TSalesBillObj();
                //如果 税收分类编码不为空,填充税编分类简称
                CommonTools.copyProperties(salesBillInterfaceObj, salesBill);
                if (!StringUtils.isBlank(salesBillInterfaceObj.getGoodsTaxNo())) {
                    //TODO 如果查询失败，应该怎么处理
                    logger.info("进入到SalesBillUploadDealListener.addSalesBillInterface2SalesBill 的else 方法块，当前时间{}", DateUtils.curDateStr());
                    fullItemShortNameIntoSalesBill(salesBill, salesBillInterfaceObj.getGoodsTaxNo());
                }
//                salesBill.setSalesBillId(CommonTools.getUUID());
                salesBill.setSalesBillId(salesBillInterfaceObj.getSalesBillId());
                salesBill.setCreateTime(Tools.getTime17());
//                salesBill.setStatus(SalesBillStatus.PENDING_PROCESS.value());
                //陈齐光
                salesBill.setStatus(SalesBillStatus.NORMAL.value());//上传成功，设置status为正常
                salesBill.setCreateUserId(messageHeader.getUsername());
                salesBill.setOrigin(SalesBillOrigin.ORIGINAL.value());
                salesBillObjLst.add(salesBill);
            }
        }
        return salesBillInterfaceProcessSuccessCounter;
    }

    /**
     * 填充业务单税编分类简称
     * 业务单通过税收分类编号(goodsTaxNo) 来获取 税编分类简称(itemShortName)
     * 2018年4月13日18:27:05 新增方法
     * Author lvxinrong
     * @param salesBill 业务单对象
     * @param goodsTaxNo 税务分类编码
     */
    private void fullItemShortNameIntoSalesBill(TSalesBillObj salesBill, String goodsTaxNo) {
        //如果 税收分类编码不为空
        TaxCatalogItem taxCatalogItem = invoiceUtils.getTaxCodeItem(goodsTaxNo);
        if (taxCatalogItem != null && !StringUtils.isBlank(taxCatalogItem.getItemShortName())) {
            logger.info("时间: {}, 查询到的税编分类简称: {}", DateUtils.curDateStr(), taxCatalogItem.getItemShortName());
            salesBill.setItemShortName(taxCatalogItem.getItemShortName());
        }
    }

    /**
     * 填充处理上传业务单消息异常处理信息
     * @param responseMsgLst  错误集合
     * @param e 处理异常
     */
    private void fulfillExceptionMessage( List<Map<String,Object>> responseMsgLst, Exception e,List<String> salesBillNoLst) {
        String msg = "00030.处理异常、请联系接口管理员(" + ExceptionUtils.getFullStackTrace(e) + responseMsgLst + ")";
        for(String salesBillNo:salesBillNoLst){
            fillRecordResponse(responseMsgLst,"", salesBillNo,msg);
        }
    }

    private void fullMessageHeaderCheckException(List<Map<String,Object>> responseMsgLst, String msg) {
        Map<String,Object> map = Maps.newHashMap();
        map.put("handleMsg", msg);
        responseMsgLst.add(map);
    }

    private void fillRecordResponse(List<Map<String,Object>> responseMsgList, String salesBillBatch, String salesBillNo, String msg){
        Map<String,Object> map = Maps.newHashMap();
        map.put("salesBillBatch", salesBillBatch);
        map.put("salesBillNo", salesBillNo);
        map.put("handleMsg", msg);
        responseMsgList.add(map);
    }
    /**
     * 发送业务单上传消息处理结果
     * @param result  成功或失败
     * @param messageHead 消息头
     * @param responseMsgList  反馈消息
     */
    private void sendUploadSalesBillProcessResult(String result, SalesBillMessageHead messageHead, List<Map<String,Object>> responseMsgList) {
//        信息反馈:{"salesBillResult":{"result":"-1","status":"1","responseMsg":[{"salesBillNo":"900800701","handleMsg":"业务单号"}]}}
        Map<String,Object> salesBillResultMapInfo = Maps.newHashMap();
        salesBillResultMapInfo.put("result", result);//-1：处理失败   1：处理成功   0：部分成功
        salesBillResultMapInfo.put("status", messageHead.getStatus());  //0 ：作废  1 ：上传   9 ：删除
        //谢刚反应:responseMsgList下的元素,salesBillNo有重复
//        Set<String> repeat = new HashSet<>();
//        Iterator<Map<String,Object>> it = responseMsgList.iterator();
//        while(it.hasNext()) {
//            Map<String,Object> map = it.next();
//            String salesBillNo = map.get("salesBillNo") +"";
//            if(repeat.contains(salesBillNo)) {
//                it.remove();
//            }else {
//                repeat.add(salesBillNo);
//            }
//        }
        // bugfix-10816
//        responseMsgList.stream().forEach(m -> m.remove("salesBillBatch"));//下发
        //
        salesBillResultMapInfo.put("responseMsg", responseMsgList);
        Map<String,Object> sendMessageMap = Maps.newHashMap();
        sendMessageMap.put("salesBillResult", salesBillResultMapInfo);
        String sendMsg = JsonUtils.writeObjectToFastJson(sendMessageMap);
        Map<String,Object> messagePropertyMap = Maps.newHashMap();
        messagePropertyMap.put("versionNo", Tools.isEmpty(messageHead.getVersionNo()) ? " " : messageHead.getVersionNo());
        messagePropertyMap.put("salesBillUploadBatchNo", messageHead.getSalesBillUploadBatchNo());
        messagePropertyMap.put("tenantCode", messageHead.getTenantCode());
        messagePropertyMap.put("systemOrig", messageHead.getSystemOrig());
        String interfaceType = "salesBillResult";
        logger.info("response: {}", salesBillResultMapInfo);
        commonCooperationTools.sendEDCUserIdCooperationSingle(sendMsg, messagePropertyMap, interfaceType, messageHead.getSalesBillUploadBatchNo(), messageHead.getSalesBillUploadBatchNo(),"DA_" + messageHead.getUsername() + "_get_01");
        commonCooperationTools.sendITBusUserIdCooperation(sendMsg, messagePropertyMap, interfaceType, messageHead.getSalesBillUploadBatchNo(), messageHead.getSalesBillUploadBatchNo(), "DA_" + messageHead.getUsername() + "_get_01");
    }

    /**
     * 插入业务单接口数据
     * @param salesBillInterfaceObj 业务单接口对象
     * @param processFlag 处理结果标记
     * @param warningMsg 检查告警消息
     */
    private void insertInterfaceRecord(TSalesBillInterfaceObj salesBillInterfaceObj ,String processFlag,String warningMsg){
        salesBillInterfaceObj.setSeqId(CommonTools.getUUID());
        salesBillInterfaceObj.setProcessFlag(processFlag);
        salesBillInterfaceObj.setProcessRemark(CommonTools.getContentByLength(warningMsg, 65535));
        salesBillInterfaceObj.setProcessTime(Tools.getTime17());
        callNewTx(salesbillTools::insetSalesbillObj, salesBillInterfaceObj);
    }

    class HeaderMessage {
        private Map<String, String> header;
        private String message;

        public HeaderMessage() {
        }

        public HeaderMessage(Map<String, String> header, String message) {
            this.header = header;
            this.message = message;
        }

        public Map<String, String> getHeader() {
            return header;
        }

        public void setHeader(Map<String, String> header) {
            this.header = header;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }
}
